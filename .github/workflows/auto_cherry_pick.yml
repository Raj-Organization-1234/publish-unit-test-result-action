name: Auto Cherry-Pick from Upstream

on:
  workflow_dispatch:
    inputs:
      original-owner:
        description: "Owner of the original repository"
        required: true
        type: string
      repo-name:
        description: "Repository name to sync from"
        required: true
        type: string
      base_branch:
        description: "Base branch to create the PR against"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  check-upstream:
    name: Cherry-Pick & Create PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Set up Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote and Fetch Changes
        run: |
          UPSTREAM_URL="https://github.com/${{ inputs.original-owner }}/${{ inputs.repo-name }}.git"
          echo "Fetching from upstream: $UPSTREAM_URL"

          # Add upstream remote if not already added
          git remote | grep -q upstream || git remote add upstream "$UPSTREAM_URL"

          # Detect default branch of upstream
          DEFAULT_BRANCH=$(git ls-remote --symref $UPSTREAM_URL HEAD | awk '/^ref:/ {sub("refs/heads/", "", $2); print $2}')
          echo "Detected upstream default branch: $DEFAULT_BRANCH"

          # Fetch upstream branch
          git fetch upstream $DEFAULT_BRANCH
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Get Last Commit Date in Our Repo
        run: |
          LAST_COMMIT_DATE=$(git log --pretty=format:'%cd' --date=iso8601-strict -1 origin/${{ inputs.base_branch }})
          echo "LAST_COMMIT_DATE=$LAST_COMMIT_DATE" >> $GITHUB_ENV

      - name: Get New Commits from Upstream Since Last Commit
        run: |
          NEW_COMMITS=$(git log --since="2024-12-01T00:00:00" --pretty=format:'%H %cd %s' upstream/${{ env.DEFAULT_BRANCH }})
          echo "NEW_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$NEW_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display New Commits
        run: |
          echo "New commits detected:"
          echo "${{ env.NEW_COMMITS }}"

      - name: Cherry-Pick New Commits
        if: env.NEW_COMMITS != ''
        run: |
          git checkout main
          SKIPPED_COMMITS=""
          CHANGES_FOUND=false

          while read -r COMMIT_HASH COMMIT_DATE COMMIT_MSG; do
            echo "Processing commit: $COMMIT_HASH"
            git cherry-pick $COMMIT_HASH || SKIPPED_COMMITS="${SKIPPED_COMMITS}\n- $COMMIT_HASH (Conflict detected)"
            
            if git diff --quiet; then
              echo "No changes detected from commit $COMMIT_HASH. Skipping..."
              git cherry-pick --abort || true
            else
              CHANGES_FOUND=true
            fi
          done <<< "${{ env.NEW_COMMITS }}"

          if [ "$CHANGES_FOUND" = true ]; then
            git add .
            git commit -m "Cherry-picked commits from upstream"
            echo "CHANGES=true" >> $GITHUB_ENV
          else
            echo "No changes after cherry-pick. Skipping further steps."
            echo "CHANGES=false" >> $GITHUB_ENV
          fi

          echo "SKIPPED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$SKIPPED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get Latest Commit SHA
        if: env.CHANGES == 'true'
        run: |
          echo "Fetching the latest commit SHA from ${{ inputs.base_branch }}..."
          SHA=$(git rev-parse HEAD)
          echo "sha=$SHA" >> $GITHUB_ENV

      - name: Create New Branch
        if: env.CHANGES == 'true'
        run: |
          BRANCH_NAME="auto-cherry-pick-$(date +'%Y-%m-%d-%H-%M-%S')"
          echo "Creating a new branch: $BRANCH_NAME..."
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Verify Branch on GitHub
        run: |
          echo "Checking if branch exists on GitHub..."
          BRANCH_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/branches/${{ env.BRANCH_NAME }}" | jq -r '.name')

          if [[ "$BRANCH_EXISTS" == "null" ]]; then
            echo "❌ Error: Branch ${{ env.BRANCH_NAME }} does not exist on GitHub."
            exit 1
          else
            echo "✅ Branch ${{ env.BRANCH_NAME }} exists on GitHub."
          fi

      - name: Debug PR Information
        run: |
          echo "Creating PR from head branch: ${{ env.BRANCH_NAME }}"
          echo "Base branch: ${{ inputs.base_branch }}"
          if [ -z "${{ env.BRANCH_NAME }}" ]; then
            echo "❌ Error: BRANCH_NAME is empty."
            exit 1
          fi
          if [ -z "${{ inputs.base_branch }}" ]; then
            echo "❌ Error: base_branch is empty."
            exit 1
          fi

      - name: Create Pull Request Using API
        if: env.NEW_COMMITS != '' && env.SKIP_PR != 'true'
        run: |
          echo "Creating a pull request..."
          
          API_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{
              \"title\": \"Sync Upstream Changes\",
              \"body\": \"Cherry-picked commits from upstream automatically.\",
              \"head\": \"${{ env.BRANCH_NAME }}\",
              \"base\": \"${{ inputs.base_branch }}\",
              \"draft\": false
            }" "https://api.github.com/repos/${{ github.repository }}/pulls")

          echo "API Response: $API_RESPONSE"

          PR_URL=$(echo "$API_RESPONSE" | jq -r '.html_url')
          PR_NUMBER=$(echo "$API_RESPONSE" | jq -r '.number')

          if [[ "$PR_URL" == "null" ]]; then
            echo "❌ Error: PR creation failed. Check API response above."
            exit 1
          else
            echo "✅ Pull Request created: $PR_URL"
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          fi

      - name: Comment on PR with Skipped Commits
        if: env.SKIPPED_COMMITS != '' && env.PR_NUMBER != ''
        run: |
          echo "Adding a comment to the PR about skipped commits..."

          COMMENT_BODY="### ⚠️ Skipped Commits Due to Conflicts\nThe following commits were skipped due to conflicts:\n\n${{ env.SKIPPED_COMMITS }}\n\nManual resolution may be required if these changes are important."

          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{
              \"body\": \"$COMMENT_BODY\"
            }" "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments"
