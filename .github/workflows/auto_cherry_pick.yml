name: Auto Cherry-Pick from Upstream

on:
  workflow_dispatch:
    inputs:
      original-owner:
        description: "Owner of the original repository"
        required: true
        type: string
      repo-name:
        description: "Repository name to sync from"
        required: true
        type: string
      base_branch:
        description: "Base branch to create the PR against"
        required: false
        type: string
        default: "main"
      use_private_packages:
        description: "Use private packages (default: false)"
        required: false
        type: boolean
      script:
        description: "Specify the npm/yarn script to run if available"
        required: false
        type: string
        default: "npm run build"
      package_manager:
        description: "Specify package manager if available (npm or yarn)"
        required: false
        type: string
        default: "npm"

permissions:
  contents: write
  pull-requests: write
  packages: read

jobs:
  check-upstream:
    name: Cherry-Pick & Create PR
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Determine Action Type
        id: check-action
        run: |
          if grep -E -q "using: ['\"]?docker['\"]?" action.yml action.yaml 2>/dev/null; then
            echo "action_type=docker" >> $GITHUB_ENV
          elif grep -E -q "using: ['\"]?node[0-9]+['\"]?" action.yml action.yaml 2>/dev/null; then
            echo "action_type=node" >> $GITHUB_ENV
          else
            echo "action_type=unknown" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Log Action Type
        run: |
          echo "**Action Type**: ${{ env.action_type }}" >> $GITHUB_STEP_SUMMARY

      - name: Add Upstream Remote and Fetch Changes
        run: |
          UPSTREAM_URL="https://github.com/${{ inputs.original-owner }}/${{ inputs.repo-name }}.git"
          echo "Fetching from upstream: $UPSTREAM_URL"
          
          git remote | grep -q upstream || git remote add upstream "$UPSTREAM_URL"
          DEFAULT_BRANCH=$(git ls-remote --symref "$UPSTREAM_URL" HEAD | awk '/^ref:/ {sub("refs/heads/", "", $2); print $2}')

          echo "Detected upstream default branch: $DEFAULT_BRANCH"
          git fetch upstream $DEFAULT_BRANCH
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Get or Create Last Sync Date via API
        id: last_sync
        run: |
          FILE_PATH=".github/upstream_sync.txt"
          REPO="${{ github.repository }}"
          BRANCH="${{ inputs.base_branch }}"
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          API_URL="https://api.github.com/repos/$REPO/contents/$FILE_PATH?ref=$BRANCH"
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "$API_URL")

          FILE_SHA=$(echo "$RESPONSE" | jq -r '.sha')
          FILE_CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 --decode 2>/dev/null || echo "")

          if [[ "$FILE_SHA" == "null" || -z "$FILE_SHA" ]]; then
            LAST_SYNC_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            echo "‚ö†Ô∏è No sync date file found. Creating it with today's date: $LAST_SYNC_DATE"

            PAYLOAD=$(jq -n \
              --arg msg "chore: initialize upstream sync date" \
              --arg content "$(echo -n "$LAST_SYNC_DATE" | base64 -w 0)" \
              --arg branch "$BRANCH" \
              '{
                "message": $msg,
                "content": $content,
                "branch": $branch
              }')

            API_CREATE_URL="https://api.github.com/repos/$REPO/contents/$FILE_PATH"
            CREATE_RESPONSE=$(curl -s -X PUT -H "Authorization: token $GH_TOKEN" \
                                        -H "Accept: application/vnd.github.v3+json" \
                                        -d "$PAYLOAD" "$API_CREATE_URL")

            if echo "$CREATE_RESPONSE" | jq -e .content > /dev/null; then
              echo "‚úÖ Successfully created last sync date file."
            else
              echo "‚ùå Failed to create file. Response:"
              echo "$CREATE_RESPONSE"
              exit 1
            fi
          else
            LAST_SYNC_DATE="$FILE_CONTENT"
            echo "‚úÖ Found existing last sync date: $LAST_SYNC_DATE"
          fi

          echo "LAST_SYNC_DATE=$LAST_SYNC_DATE" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get New Commits from Upstream
        run: |
          echo "Fetching new commits from upstream since: ${{ env.LAST_SYNC_DATE }}"
          
          NEW_COMMITS=$(git log --since="${{ env.LAST_SYNC_DATE }}" --pretty=format:'%H' upstream/${{ env.DEFAULT_BRANCH }} || true)

          if [ -z "$NEW_COMMITS" ]; then
            echo "‚úÖ No new commits found. Skipping cherry-pick."
            exit 0
          fi

          echo "üÜï New commits to cherry-pick:"
          echo "$NEW_COMMITS"

          echo "NEW_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$NEW_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check for Existing PR
        id: check_pr
        run: |
          REPO=${{ github.repository }}
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME="auto-cherry-pick"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          EXISTING_PR_JSON=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/pulls?state=open&head=${{ github.repository_owner }}:$BRANCH_NAME")
          EXISTING_PR_URL=$(echo "$EXISTING_PR_JSON" | jq -r '.[0] | select(.html_url != null) | .html_url' || echo "")
          EXISTING_PR_NUMBER=$(echo "$EXISTING_PR_JSON" | jq -r '.[0] | select(.number != null) | .number' || echo "")
          if [[ -n "$EXISTING_PR_URL" && -n "$EXISTING_PR_NUMBER" ]]; then
            echo "Existing PR found: $EXISTING_PR_URL (PR #$EXISTING_PR_NUMBER)"
            echo "pr_exists=true" >> $GITHUB_ENV
            echo "pr_url=$EXISTING_PR_URL" >> $GITHUB_ENV
            echo "PR_NUMBER=$EXISTING_PR_NUMBER" >> $GITHUB_ENV
          else
            echo "No existing PR found."
            echo "pr_exists=false" >> $GITHUB_ENV
          fi

      - name: Reset & Update PR Branch Using API
        run: |
          echo "üîç Checking if branch ${{ env.BRANCH_NAME }} exists..."

          BRANCH_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ env.BRANCH_NAME }}")

          BRANCH_EXISTS=$(echo "$BRANCH_RESPONSE" | jq -r '.ref // empty')

          BASE_COMMIT_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ inputs.base_branch }}" | jq -r '.object.sha')

          if [[ -n "$BRANCH_EXISTS" ]]; then
            echo "üîÑ Branch ${{ env.BRANCH_NAME }} exists. Resetting to match ${{ inputs.base_branch }}"
            curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"sha\": \"$BASE_COMMIT_SHA\", \"force\": true}" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ env.BRANCH_NAME }}"
            echo "‚úÖ Branch ${{ env.BRANCH_NAME }} reset successfully."
          else
            echo "üÜï Branch ${{ env.BRANCH_NAME }} does not exist. Creating from ${{ inputs.base_branch }}..."
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"ref\": \"refs/heads/${{ env.BRANCH_NAME }}\", \"sha\": \"$BASE_COMMIT_SHA\"}" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs"
            echo "‚úÖ New branch ${{ env.BRANCH_NAME }} created successfully."
          fi

      - name: Cherry-Pick New Commits via API
        run: |
          UPSTREAM_REPO="${{ inputs.original-owner }}/${{ inputs.repo-name }}"
          TARGET_REPO="${{ github.repository }}"
          BRANCH="${{ env.BRANCH_NAME }}"
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          echo "üöÄ Starting API-based cherry-picking from $UPSTREAM_REPO to $TARGET_REPO on branch: $BRANCH"

          SKIPPED_COMMITS=""
          CHANGES_FOUND=false

          while read -r COMMIT_HASH; do
            echo "Processing commit: $COMMIT_HASH"

            # Fetch commit details from upstream
            COMMIT_DETAILS=$(curl -s -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$UPSTREAM_REPO/commits/$COMMIT_HASH")

            COMMIT_MESSAGE=$(echo "$COMMIT_DETAILS" | jq -r '.commit.message' | jq -Rs .)
            TREE_SHA=$(echo "$COMMIT_DETAILS" | jq -r '.commit.tree.sha')

            if [ -z "$TREE_SHA" ] || [ "$TREE_SHA" == "null" ]; then
              echo "‚ùå Error: TREE_SHA is missing for commit $COMMIT_HASH. Skipping."
              SKIPPED_COMMITS="${SKIPPED_COMMITS}\n$COMMIT_HASH"
              continue
            fi

            # Get the list of changed files in this commit
            MODIFIED_FILES=$(echo "$COMMIT_DETAILS" | jq -r '.files[].filename')

            WORKFLOW_FILE_CHANGES=$(echo "$MODIFIED_FILES" | grep "^.github/workflows/" || true)

            echo "üîÑ MODIFIED_FILES: $MODIFIED_FILES"
            if [ -n "$WORKFLOW_FILE_CHANGES" ]; then
              echo "‚ö†Ô∏è Skipping commit $COMMIT_HASH as it modifies workflow files."
              SKIPPED_COMMITS="${SKIPPED_COMMITS}\n$COMMIT_HASH"
              continue
            fi

            echo "üåø TREE_SHA: $TREE_SHA"

            # Fetch the latest commit SHA of the target branch in your repo
            LATEST_SHA=$(curl -s -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$TARGET_REPO/git/ref/heads/$BRANCH" | jq -r '.object.sha')

            if [ -z "$LATEST_SHA" ] || [ "$LATEST_SHA" == "null" ]; then
              echo "‚ùå Error: LATEST_SHA is missing for branch $BRANCH. Skipping commit $COMMIT_HASH."
              SKIPPED_COMMITS="${SKIPPED_COMMITS}\n$COMMIT_HASH"
              continue
            fi

            echo "üîÑ LATEST_SHA: $LATEST_SHA"

            # Apply upstream changes to your repository
            for FILE in $MODIFIED_FILES; do
              # Fetch file contents from upstream
              FILE_RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$UPSTREAM_REPO/contents/$FILE?ref=$COMMIT_HASH")
                
              FILE_CONTENT=$(echo "$FILE_RESPONSE" | jq -r '.content' | base64 --decode | base64 | jq -Rs .)

              echo "üîÑ FILE_CONTENT: $FILE_CONTENT"
              if [ -z "$FILE_CONTENT" ] || [ "$FILE_CONTENT" == "null" ]; then
                echo "‚ö†Ô∏è Skipping file $FILE (could not fetch content)."
                continue
              fi

              # Get existing file SHA (required for updating an existing file)
              FILE_SHA=$(curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/$TARGET_REPO/contents/$FILE?ref=$BRANCH" | jq -r .sha)

              if [ "$FILE_SHA" == "null" ]; then FILE_SHA=""; fi

              PAYLOAD=$(jq -n --arg msg "$COMMIT_MESSAGE" \
                            --arg content "$FILE_CONTENT" \
                            --arg branch "$BRANCH" \
                            --arg sha "$FILE_SHA" \
                            '{
                              "message": $msg,
                              "content": $content,
                              "branch": $branch,
                              "sha": $sha
                            }')

              UPDATE_RESPONSE=$(curl -s -X PUT -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "$PAYLOAD" "https://api.github.com/repos/$TARGET_REPO/contents/$FILE")

              if echo "$UPDATE_RESPONSE" | jq -e '.content' > /dev/null; then
                echo "‚úÖ Successfully committed $FILE from upstream."
                CHANGES_FOUND=true
              else
                echo "‚ùå Failed to update $FILE. Full API Response:"
                echo "$UPDATE_RESPONSE"
                SKIPPED_COMMITS="${SKIPPED_COMMITS}\n$COMMIT_HASH"
              fi
            done
          done <<< "${{ env.NEW_COMMITS }}"

          if [ "$CHANGES_FOUND" = false ]; then
            echo "No changes after cherry-pick. Skipping further steps."
            exit 0
          fi

          echo "CHANGES=true" >> $GITHUB_ENV
          echo "SKIPPED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$SKIPPED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      - name: Set Up Node.js
        if: env.action_type == 'node' && env.CHANGES == 'true'
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: "20"
          cache: ${{ inputs.package_manager }}

      - name: Authenticate npm with GitHub Packages (if using private packages)
        if: env.action_type == 'node' && inputs.use_private_packages == true
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com/" >> ~/.npmrc
      - name: Install dependencies
        if: env.action_type == 'node' && env.CHANGES == 'true'
        run: |
          if [ "${{ inputs.package_manager }}" == "npm" ]; then
            npm ci
          else
            yarn install --frozen-lockfile
          fi
      - name: Run Specified Build Script
        if: env.action_type == 'node' && env.CHANGES == 'true'
        run: |
          eval "${{ inputs.script }}" || echo "No build script found or failed, skipping."
          git add .
          if git diff --cached --exit-code; then
            echo "No additional changes from build process."
          else
            git commit -m "chore: update build artifacts"
          fi
      - name: Create or Update Pull Request
        if: env.CHANGES == 'true'
        run: |
          if [ "${{ env.pr_exists }}" == "true" ]; then
            echo "‚úÖ PR already exists: ${{ env.pr_url }} - Forcing push with updates..."
            git push origin "$BRANCH_NAME" --force
          else
            echo "Creating a new PR..."
            git push origin "$BRANCH_NAME" --force
            API_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{
                \"title\": \"fix: Sync Upstream Changes\",
                \"body\": \"Cherry-picked commits from upstream automatically.\",
                \"head\": \"${{ env.BRANCH_NAME }}\",
                \"base\": \"${{ inputs.base_branch }}\",
                \"draft\": false
              }" "https://api.github.com/repos/${{ github.repository }}/pulls")
            echo "API Response: $API_RESPONSE"
            PR_URL=$(echo "$API_RESPONSE" | jq -r '.html_url')
            PR_NUMBER=$(echo "$API_RESPONSE" | jq -r '.number')
            if [[ "$PR_URL" == "null" ]]; then
              echo "‚ùå Error: PR creation failed. Check API response above."
              exit 1
            else
              echo "‚úÖ Pull Request created: $PR_URL"
              echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            fi
          fi

      - name: Update Last Sync Date File
        run: |
          SYNC_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "$SYNC_DATE" > .github/upstream_sync.txt
          git add .github/upstream_sync.txt

          git commit -m "chore: update last sync date to $SYNC_DATE" || echo "No changes to commit"
          git push origin "${{ inputs.base_branch }}" || echo "No changes to push"

      - name: Comment on PR with Updates (Single Comment Per PR)
        if: env.PR_NUMBER != ''
        run: |
          echo "Checking for existing bot comment on PR #${{ env.PR_NUMBER }}"
          {
            echo "üöÄ PR Updated!"
            echo ""
            echo "The PR has been updated with the latest cherry-picked commits."
            echo ""
            if [ -n "${{ env.SKIPPED_COMMITS }}" ]; then
              echo "‚ö†Ô∏è Skipped Commits Due to Conflicts:"
              while IFS= read -r line; do
                echo "- $line"
              done <<< "${{ env.SKIPPED_COMMITS }}"
              echo ""
            fi
            if [ "${{ env.WORKFLOW_CHANGES }}" == "true" ]; then
              echo "‚ö†Ô∏è Workflow file changes were detected and **excluded from this PR**."
              echo "Please review and handle them manually."
              echo ""
            fi
          } > comment_body.txt
          COMMENT_BODY_ESCAPED=$(jq -Rs . < comment_body.txt)
          EXISTING_COMMENT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments" | 
            jq -r '.[] | select(.body | contains("üöÄ PR Updated!")) | .id')
          if [ -n "$EXISTING_COMMENT_ID" ]; then
            echo "Updating existing comment: $EXISTING_COMMENT_ID"
            curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": $COMMENT_BODY_ESCAPED}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT_ID"
          else
            echo "No existing comment found. Creating a new comment."
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": $COMMENT_BODY_ESCAPED}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments"
          fi

      - name: Request Review
        if: env.PR_NUMBER != ''
        run: |
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "team_reviewers": ["maintained-actions-dev"]
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}/requested_reviewers"
