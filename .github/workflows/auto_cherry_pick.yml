name: Auto Cherry-Pick from Upstream

on:
  workflow_dispatch:
    inputs:
      original-owner:
        description: "Owner of the original repository"
        required: true
        type: string
      repo-name:
        description: "Repository name to sync from"
        required: true
        type: string
      base_branch:
        description: "Base branch to create the PR against"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  check-upstream:
    name: Cherry-Pick & Create PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Set up Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add Upstream Remote and Fetch Changes
        run: |
          UPSTREAM_URL="https://github.com/${{ inputs.original-owner }}/${{ inputs.repo-name }}.git"
          echo "Fetching from upstream: $UPSTREAM_URL"

          git remote | grep -q upstream || git remote add upstream "$UPSTREAM_URL"

          # Detect default branch of upstream
          DEFAULT_BRANCH=$(git ls-remote --symref "$UPSTREAM_URL" HEAD | awk '/^ref:/ {sub("refs/heads/", "", $2); print $2}')
          echo "Detected upstream default branch: $DEFAULT_BRANCH"

          git fetch upstream $DEFAULT_BRANCH
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Get New Commits from Upstream Since Last Commit
        run: |
          NEW_COMMITS=$(git log --since="2024-12-01T00:00:00" --pretty=format:'%H' upstream/${{ env.DEFAULT_BRANCH }}) || true

          if [ -z "$NEW_COMMITS" ]; then
            echo "No new commits found. Exiting."
            exit 0
          fi

          echo "NEW_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$NEW_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display New Commits
        run: |
          echo "New commits detected:"
          echo "${{ env.NEW_COMMITS }}"

      - name: Create New Branch
        if: env.NEW_COMMITS != ''
        run: |
          git checkout "${{ inputs.base_branch }}"
          BRANCH_NAME="auto-cherry-pick-$(date +'%Y-%m-%d-%H-%M-%S')"
          echo "Creating a new branch: $BRANCH_NAME..."
          git checkout -b "$BRANCH_NAME"
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Cherry-Pick New Commits
        if: env.NEW_COMMITS != ''
        run: |
          SKIPPED_COMMITS=""
          CHANGES_FOUND=false

          while read -r COMMIT_HASH; do
            echo "Processing commit: $COMMIT_HASH"

            git cherry-pick --abort || true

            if git cherry-pick $COMMIT_HASH; then
              echo "✅ Successfully cherry-picked $COMMIT_HASH"
              CHANGES_FOUND=true

              # Set author as github-actions[bot]
              git commit --amend --no-edit --author="github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
            else
              echo "⚠️ Conflict detected or empty commit for $COMMIT_HASH. Skipping..."
              SKIPPED_COMMITS="${SKIPPED_COMMITS}\n- $COMMIT_HASH (Conflict or no changes)"
              git cherry-pick --abort || true
            fi
          done <<< "${{ env.NEW_COMMITS }}"

          if [ "$CHANGES_FOUND" = true ]; then
            git push origin "$BRANCH_NAME"
            echo "CHANGES=true" >> $GITHUB_ENV
          else
            echo "No changes after cherry-pick. Skipping further steps."
            echo "CHANGES=false" >> $GITHUB_ENV
          fi

          echo "SKIPPED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$SKIPPED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Pull Request Using API
        if: env.CHANGES == 'true'
        run: |
          echo "Creating a pull request..."
          API_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{
              \"title\": \"Sync Upstream Changes\",
              \"body\": \"Cherry-picked commits from upstream automatically.\",
              \"head\": \"${{ env.BRANCH_NAME }}\",
              \"base\": \"${{ inputs.base_branch }}\",
              \"draft\": false
            }" "https://api.github.com/repos/${{ github.repository }}/pulls")

          echo "API Response: $API_RESPONSE"
          PR_URL=$(echo "$API_RESPONSE" | jq -r '.html_url')
          PR_NUMBER=$(echo "$API_RESPONSE" | jq -r '.number')

          if [[ "$PR_URL" == "null" ]]; then
            echo "❌ Error: PR creation failed. Check API response above."
            exit 1
          else
            echo "✅ Pull Request created: $PR_URL"
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          fi

      - name: Comment on PR with Skipped Commits
        if: env.SKIPPED_COMMITS != '' && env.PR_NUMBER != ''
        run: |
          echo "Adding a simple comment with skipped commit hashes and URLs..."

          SKIPPED_LIST=""
          while read -r COMMIT_HASH; do
            CLEAN_COMMIT_HASH=$(echo "$COMMIT_HASH" | tr -d '[:space:]')
            SKIPPED_LIST+="https://github.com/${{ inputs.original-owner }}/${{ inputs.repo-name }}/commit/$CLEAN_COMMIT_HASH\n"
          done <<< "${{ env.SKIPPED_COMMITS }}"

          # Remove trailing \n from SKIPPED_LIST
          SKIPPED_LIST=$(echo -e "$SKIPPED_LIST" | tr -d '\n')

          # Prepare a simple comment with commit hashes and URLs
          COMMENT_BODY="Skipped commits due to conflicts: $SKIPPED_LIST"

          # Escape JSON properly
          COMMENT_BODY_ESCAPED=$(echo "$COMMENT_BODY" | jq -Rs .)

          # Post the comment via GitHub API
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": $COMMENT_BODY_ESCAPED}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments"
